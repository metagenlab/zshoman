/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/logs" },
        mode: params.publish_dir_mode,
        pattern: '*.log',
        enabled: params.publish.logs
    ]
    withName: ASSEMBLY_STATS {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assembly" },
            mode: params.publish_dir_mode,
            pattern: '*.stats',
            enabled: params.publish.assemblies
        ]
    }
    withName: BBDUK_FILTER_PHIX {
        ext.prefix = { "${meta.id}_phix_filtered" }
        ext.args = 'usejni=t k=31 hdist=1 refstats=phix.stats statscolumns=5'
    }
    withName: 'BBDUK_QUALITY_FILTERING' {
        ext.prefix = { "${meta.id}_quality_filtered" }
        ext.args = 'usejni=t minlength=45 qtrim=rl maq=20 maxns=1 stats=qc.stats statscolumns=5 trimq=14'
        cpus   = { 12    * task.attempt }
    }
    withName: BBDUK_TRIM_ADAPTERS {
        ext.prefix = { "${meta.id}_trimmed" }
        ext.args = 'usejni=t refstats=adapter_trim.stats statscolumns=5 ktrim=r k=23 mink=11 hdist=1'
    }
    withName: 'BBMAP_FILTER_HOST.*' {
        ext.prefix = { "${meta.id}_host_filtered" }
        ext.args = 'usejni=t qin=33 minid=0.95 maxindel=3 bwr=0.16 bw=12 quickmatch fast minhits=2 qtrim=rl trimq=15 untrim'
        publishDir = [
            [path: { "${params.outdir}/${meta.id}/preprocessed_reads" },
             mode: params.publish_dir_mode,
             pattern: '*.fastq.gz',
             enabled: params.publish.preprocessed_reads],
            [path: { "${params.outdir}/logs" },
             mode: params.publish_dir_mode,
             pattern: '*.log',
             enabled: params.publish.logs]
        ]
    }
    withName: 'BBMAP_FILTER_HOST_SINGLETONS' {
        ext.prefix = { "${meta.id}_host_filtered_singletons" }
    }
    withName: BBMAP_INDEX_HOST {
        memory = { 30.GB * task.attempt }
        cpus   = { 12    * task.attempt }
    }
    withName: BBMAP_MERGE_PAIRS {
        ext.args = 'usejni=t minoverlap=16'
        publishDir = [
            [path: { "${params.outdir}/${meta.id}/preprocessed_reads" },
             mode: params.publish_dir_mode,
             pattern: '*.fastq.gz',
             enabled: params.publish.preprocessed_reads],
            [path: { "${params.outdir}/logs" },
             mode: params.publish_dir_mode,
             pattern: '*.log',
             enabled: params.publish.logs]
        ]
    }
    withName: 'BWA_MEM.*' {
        ext.args = '-a'
        ext.args2 = "-F 260 -bh -e '(qlen-sclen)>45' -O BAM"
    }
    withName: CAT_AA {
        ext.prefix = { "${meta.id}_aa" }
    }
    withName: CAT_NT {
        ext.prefix = { "${meta.id}_nt" }
    }
    withName: CAT_R1 {
        ext.prefix = { "${meta.id}_R1.fastq.gz" }
    }
    withName: CAT_R2 {
        ext.prefix = { "${meta.id}_R2.fastq.gz" }
    }
    withName: CDHIT_CDHITEST {
        ext.args = '-c 0.95 -G 0 -aS 0.9 -g 1 -r 1 -d 0'
        ext.suffix = 'fa'
    }
    withName: EGGNOGMAPPER_GC {
        publishDir = [
            path: { "${params.outdir}/gene_catalog/" },
            mode: params.publish_dir_mode,
            pattern: '*.emapper.annotations',
        ]
    }
    withName: EGGNOGMAPPER_SAMPLES {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotations" },
            mode: params.publish_dir_mode,
            pattern: '*.emapper.annotations',
        ]
    }
    withName: 'FILTERSAM.*' {
        ext.args = '-i 95'
    }
    withName: METAEUK_EASYPREDICT {
        memory = { 150.GB * task.attempt }
        cpus   = { 16     * task.attempt }
    }
    withName: MOTUS_PROFILE {
        ext.args = '-c -k mOTU -q -p'
        publishDir = [
            [path: { "${params.outdir}/${meta.id}/motus" },
             mode: params.publish_dir_mode,
             pattern: '*.motus',
             enabled: params.publish.taxonomic_profiling],
            [path: { "${params.outdir}/logs" },
             mode: params.publish_dir_mode,
             pattern: '*.log',
             enabled: params.publish.logs]
        ]
    }
    withName: NORMALIZE_COUNTS_GC {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gene_counts_gc/" },
            mode: params.publish_dir_mode,
            pattern: '*_genes_per_cell.csv',
        ]
    }
    withName: NORMALIZE_COUNTS_SAMPLES {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gene_counts/" },
            mode: params.publish_dir_mode,
            pattern: '*_genes_per_cell.csv',
        ]
    }
    withName: PHANTA_PROFILE {
        publishDir = [
            [path: { "${params.outdir}/${meta.id}/phanta" },
             mode: params.publish_dir_mode,
             pattern: 'final_merged_outputs/*.txt',
             enabled: params.publish.taxonomic_profiling],
            [path: { "${params.outdir}/logs" },
             mode: params.publish_dir_mode,
             pattern: '*.log',
             enabled: params.publish.logs]
        ]
    }
    withName: PRODIGAL {
        ext.args = '-c -q -p meta'
    }
    withName: SEQTK_SUBSEQ {
        publishDir = [
            path: { "${params.outdir}/gene_catalog/" },
            mode: params.publish_dir_mode,
            pattern: '*.gz',
            enabled: params.publish.gene_catalog
        ]
    }
    withName: SPADES {
        errorStrategy = { task.exitStatus in ((130..145) + 104 + 250) ? 'retry' : 'finish' }
        ext.args = '--only-assembler'
        publishDir = [
            [path: { "${params.outdir}/${meta.id}/assembly" },
             mode: params.publish_dir_mode,
             pattern: '{*.scaffolds.fa.gz,*.assembly.gfa.gz,*.scaffolds.paths.gz}',
             enabled: params.publish.assemblies],
            [path: { "${params.outdir}/logs" },
             mode: params.publish_dir_mode,
             pattern: '*.log',
             enabled: params.publish.logs]
        ]
    }
}
